#!/usr/bin/python

# Imports
import os, re, threading, sys, getopt, time
import urwid
import fcntl, termios, struct
from subprocess import check_output
from subprocess import call
from subprocess import Popen, PIPE

# The brains
class Rdio:
	def __init__(self, delay):
		while(True):
			self.nowPlaying()
			time.sleep(self.delay)

	def getStatus(self):
		scpt = '''
		tell application "Rdio"
			set playStatus to (get player state)
			return (playStatus) as text
		end tell'''

		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def getArtist(self):
		scpt = '''
		tell application "Rdio"
			if player state is playing then
				set artistName to (get artist of current track)
				return (artistName) as text
			end if
		end tell'''

		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def getSong(self):
		scpt = '''
		tell application "Rdio"
			if player state is playing then
				set trackName to (get name of current track)
				return (trackName) as text
			end if
		end tell'''
		
		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def nowPlaying(self):
		status = str(self.getStatus())

		palette = [
			('banner', 'black', 'light gray'),
			('streak', 'black', 'dark red'),
			('bg', 'black', 'dark blue'),]

		placeholder = urwid.SolidFill()
		loop = urwid.MainLoop(placeholder, palette)
		loop.widget = urwid.AttrMap(placeholder, 'bg')
		loop.widget.original_widget = urwid.Filler(urwid.Pile([]), "top")

		pile = loop.widget.base_widget
		widgets = []

		title = urwid.Text(u"RDIO COMMANDER", align='center')
		titleMap = urwid.AttrMap(title, 'banner')
		pile.contents.append((titleMap, pile.options()))

		if "play" in status:
			self.song = self.getSong()
			self.artist = self.getArtist()
			
			title = urwid.Text(u"NOW PLAYING ON RDIO", align='center')
			titleMap = urwid.AttrMap(title, 'streak')

			pile.contents.append((titleMap, pile.options()))
		elif "pause" in status:
			txt = urwid.Text(u"PAUSED ON RDIO", align='center')
			pile.contents.append((txt, pile.options()))
		else:
			txt = urwid.Text(u"PLAYING NOTHING ON RDIO", align='center')
			pile.contents.append((txt, pile.options()))

		spacer = urwid.Text(u"")
		pile.contents.append((spacer, pile.options()))

		if self.artist and self.song:
			txt = self.artist + self.song
			details = urwid.Text(txt, align='center')
			pile.contents.append((details, pile.options()))
		else:
			txt = urwid.Text(u"Why not find some punk?", align='center')
			pile.contents.append((txt, pile.options()))

		loop.run()

# The main class to handle threads, and inputs
class Main:
	# Setup some default varialbes
	delay = 30.0

	def __init__(self, argv):
		# Check for command line arguments
		try:
			opts, args = getopt.getopt(argv,"hd:",["help", "delay="])
		except getopt.GetoptError:
			print 'rdio.py -d <delay>'
			sys.exit(2)

		for opt, arg in opts:
			if opt == '-h':
				print 'Rdio.py -d <delay>'
				sys.exit()
			elif opt in ("-d", "--delay"):
				self.delay = float(arg)

		try:
			self.rdio = Rdio(self.delay)
		except KeyboardInterrupt:
			sys.exit()

if __name__ == "__main__":
	main = Main(sys.argv[1:])
