#!/usr/bin/python

# Imports
import os, re, threading, sys, getopt, time
import urwid
import fcntl, termios, struct
from subprocess import check_output
from subprocess import call
from subprocess import Popen, PIPE

# The brains
class Rdio:
	def __init__(self, delay):
		self.palette = [
			('banner', 'black', 'light gray'),
			('paused', 'black', 'dark red'),
			('playing', 'black', 'dark green'),
			('bg', 'black', 'dark blue'),]

		placeholder = urwid.SolidFill()
		self.loop = urwid.MainLoop(placeholder, self.palette)
		self.loop.widget = urwid.AttrMap(placeholder, 'bg')
		self.loop.widget.original_widget = urwid.Pile([])

		pile = self.loop.widget.base_widget
		widgets = []

		# create and add title to pile
		self.title = urwid.Text(u"RDIO COMMANDER", align='center')
		self.titleMap = urwid.AttrMap(self.title, 'banner')
		pile.contents.append((self.titleMap, pile.options('pack')))
		pile.contents.append((urwid.SolidFill(), pile.options()))
		
		# create status message
                self.status = urwid.Text(u"PLAYING NOTHING ON RDIO", align='center')
                self.statusMap = urwid.AttrMap(self.status, 'paused')
		
		# create and add song / atrist to the screen
		self.details = urwid.Text(u"Why not find some punk?", align='center')
		
		pile.contents.append((self.details, pile.options('pack')))
		pile.contents.append((urwid.SolidFill(), pile.options()))

		# add status message
		pile.contents.append((self.statusMap, pile.options('pack')))

                self.loop.set_alarm_in(delay, self.nowPlaying)

                self.nowPlaying(self.loop)
		self.loop.run()

	def getStatus(self):
		scpt = '''
		tell application "Rdio"
			set playStatus to (get player state)
			return (playStatus) as text
		end tell'''

		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def getArtist(self):
		scpt = '''
		tell application "Rdio"
			if player state is playing then
				set artistName to (get artist of current track)
				return (artistName) as text
			end if
		end tell'''

		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def getSong(self):
		scpt = '''
		tell application "Rdio"
			if player state is playing then
				set trackName to (get name of current track)
				return (trackName) as text
			end if
		end tell'''
		
		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def nowPlaying(self, loop, user_data = None):
		status = str(self.getStatus())
		
		if "play" in status:
			self.song = self.getSong()
			self.artist = self.getArtist()

                        self.status.set_text(u"NOW PLAYING ON RDIO")
                        self.statusMap.set_attr_map({None: 'playing'})
		elif "pause" in status:
			self.status.set_text(u"PAUSED ON RDIO")
                        self.statusMap.set_attr_map({None: 'paused'})
		else:
			self.status.set_text(u"PLAYING NOTHING ON RDIO")
                        self.statusMap.set_attr_map({None: 'paused'})
		
                if self.artist and self.song:
			self.details.set_text(self.artist + self.song)


# The main class to handle threads, and inputs
class Main:
	# Setup some default varialbes
	delay = 5.0

	def __init__(self, argv):
		# Check for command line arguments
		try:
			opts, args = getopt.getopt(argv,"hd:",["help", "delay="])
		except getopt.GetoptError:
			print 'rdio.py -d <delay>'
			sys.exit(2)

		for opt, arg in opts:
			if opt == '-h':
				print 'Rdio.py -d <delay>'
				sys.exit()
			elif opt in ("-d", "--delay"):
				self.delay = float(arg)

		try:
			self.rdio = Rdio(self.delay)
		except KeyboardInterrupt:
			sys.exit()

if __name__ == "__main__":
	main = Main(sys.argv[1:])
