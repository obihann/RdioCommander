#!/usr/bin/python

# Imports
import os, re, threading, sys, getopt, time
import fcntl, termios, struct
from subprocess import check_output
from subprocess import call
from subprocess import Popen, PIPE

# The brains
class Rdio:
	def __init__(self, delay):
		self.delay = delay
		self.terminal_size()

		while(True):
			self.nowPlaying()
			time.sleep(self.delay)

	def terminal_size(self):
		h, w, hp, wp = struct.unpack('HHHH',
			fcntl.ioctl(0, termios.TIOCGWINSZ,
			struct.pack('HHHH', 0, 0, 0, 0)))

		self.width = w
		self.height = h
	
	def printCenter(self, txt):
		print(str.center(txt, self.width).rstrip())

	def getStatus(self):
		scpt = '''
		tell application "Rdio"
			set playStatus to (get player state)
			return (playStatus) as text
		end tell'''

		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def getArtist(self):
		scpt = '''
		tell application "Rdio"
			if player state is playing then
				set artistName to (get artist of current track)
				return (artistName) as text
			end if
		end tell'''

		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def getSong(self):
		scpt = '''
		tell application "Rdio"
			if player state is playing then
				set trackName to (get name of current track)
				return (trackName) as text
			end if
		end tell'''
		
		p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
		stdout, stderr = p.communicate(scpt)

		return stdout

	def centerRows(self, rows):
		margin = (self.height / 2) - (rows / 2)

		for x in range (0, margin):
			print("")

	def nowPlaying(self):
		os.system('clear')
		self.centerRows(4)
		status = str(self.getStatus())

		if "play" in status:
			self.printCenter("NOW PLAYING ON RDIO")
			self.song = self.getSong()
			self.artist = self.getArtist()
		elif "pause" in status:
			self.printCenter("PAUSED ON RDIO")
		else:
			self.printCenter("PLAYING NOTHING ON RDIO")
		
		self.printCenter("--------------------")

		if self.artist and self.song:
			self.printCenter(self.artist)
			self.printCenter(self.song)
		else:
			self.printCenter("Why not find some punk?")

# The main class to handle threads, and inputs
class Main:
	# Setup some default varialbes
	delay = 30.0

	def __init__(self, argv):
		# Check for command line arguments
		try:
			opts, args = getopt.getopt(argv,"hd:",["help", "delay="])
		except getopt.GetoptError:
			print 'rdio.py -d <delay>'
			sys.exit(2)

		for opt, arg in opts:
			if opt == '-h':
				print 'Rdio.py -d <delay>'
				sys.exit()
			elif opt in ("-d", "--delay"):
				self.delay = float(arg)

		try:
			self.rdio = Rdio(self.delay)
		except KeyboardInterrupt:
			sys.exit()

if __name__ == "__main__":
	main = Main(sys.argv[1:])
