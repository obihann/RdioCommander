#!/usr/bin/python

# Imports
import sys, argparse
import urwid
from subprocess import Popen, PIPE

# The brains
class Rdio:
	lightPallet = [
			('banner', 'black', 'light gray'),
			('paused', 'black', 'dark red'),
			('playing', 'black', 'dark green'),
			('bg', 'black', 'dark blue'),]

	darkPallet = [
			('banner', 'light gray', 'black'),
			('paused', 'dark red', 'light gray'),
			('playing', 'dark green', 'light gray'),
			('bg', 'dark blue', 'dark gray'),]

	def __init__(self, delay, color):
		self.delay = delay
		if color == 1:
			self.palette = self.lightPallet
		else:
			self.palette = self.darkPallet

		placeholder = urwid.SolidFill()
		self.loop = urwid.MainLoop(placeholder, self.palette)
		self.loop.widget = urwid.AttrMap(placeholder, 'bg')
		self.loop.widget.original_widget = urwid.Pile([])

		pile = self.loop.widget.base_widget
		widgets = []

		# create and add title to pile
		self.title = urwid.Text(u"RDIO COMMANDER", align='center')
		self.titleMap = urwid.AttrMap(self.title, 'banner')
		pile.contents.append((self.titleMap, pile.options('pack')))
		pile.contents.append((urwid.SolidFill(), pile.options()))

		# create status message
		self.status = urwid.Text(u"PLAYING NOTHING ON RDIO", align='center')
		self.statusMap = urwid.AttrMap(self.status, 'paused')

		# create and add song / atrist to the screen
		self.details = urwid.Text(u"Why not find some punk?", align='center')

		pile.contents.append((self.details, pile.options('pack')))
		pile.contents.append((urwid.SolidFill(), pile.options()))

		# add status message
		pile.contents.append((self.statusMap, pile.options('pack')))

		self.nowPlaying(self.loop)
		self.loop.run()

	def getRdio(self, req):
		scpt = ""

		if req == 'status':
			scpt = '''
			tell application "Rdio"
				set playStatus to (get player state)
				return (playStatus) as text
			end tell'''
		elif req == 'artist':
			scpt = '''
			tell application "Rdio"
				if player state is playing then
					set artistName to (get artist of current track)
					return (artistName) as text
				end if
			end tell'''
		elif req == 'song':
			scpt = '''
			tell application "Rdio"
				if player state is playing then
					set trackName to (get name of current track)
					return (trackName) as text
				end if
			end tell'''

		stdout = ""

		if scpt != "":
			p = Popen(['osascript', '-'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
			stdout, stderr = p.communicate(scpt)

		return stdout

	def nowPlaying(self, loop, user_data = None):
		status = str(self.getRdio('status'))

		if "play" in status:
			self.song = self.getRdio('song')
			self.artist = self.getRdio('artist')

			self.status.set_text(u"NOW PLAYING ON RDIO")
			self.statusMap.set_attr_map({None: 'playing'})
		elif "pause" in status:
			self.status.set_text(u"PAUSED ON RDIO")
			self.statusMap.set_attr_map({None: 'paused'})
		else:
			self.status.set_text(u"PLAYING NOTHING ON RDIO")
			self.statusMap.set_attr_map({None: 'paused'})

		if hasattr(self, 'artist') and hasattr(self, 'song'):
			self.details.set_text(self.artist + self.song)
		else:
			self.status.set_text(u"PLAYING NOTHING ON RDIO")
			self.statusMap.set_attr_map({None: 'paused'})

		self.loop.set_alarm_in(self.delay, self.nowPlaying)


# The main class to handle threads, and inputs
class Main:
	# Setup some default varialbes
	delay = 5
	color = 2
	version = "1.1.0"

	def __init__(self, argv):
		print 'RDIO COMMANDER ' + self.version
		print 'https://github.com/obihann/RdioCommander/'
		print 'This tool is protected by the GNU General Public License v2.'
		print 'Copyright Jeffrey Hann 2014'
		print '------------------------------------------------------------'
		parser = argparse.ArgumentParser()
		parser.add_argument("-r", "--refresh", type=float, help="Adjust the number of seconds the app refreshes the screen")
		parser.add_argument("-c", "--color", type=str, help="Specify a light or dark color scheme")

		args = parser.parse_args()
		if args.refresh:
			self.delay = args.refresh
		if args.color:
			if str.color == "light":
				self.color = 1
			else:
				self.color - 2

		try:
			self.rdio = Rdio(self.delay, self.color)
		except KeyboardInterrupt:
			sys.exit()


if __name__ == "__main__":
	main = Main(sys.argv[1:])
